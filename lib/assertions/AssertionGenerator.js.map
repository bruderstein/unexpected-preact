{"version":3,"sources":["../../src/assertions/AssertionGenerator.js"],"names":["PENDING_TEST_EVENT_TYPE","dummy","getDefaultOptions","flags","diffWrappers","exactly","withAllWrappers","diffExtraChildren","withAllChildren","diffExtraAttributes","withAllAttributes","diffExactClasses","diffExtraClasses","withAllClasses","AssertionGenerator","options","_options","Object","assign","_PENDING_EVENT_IDENTIFIER","mainAssertionGenerator","getEventIdentifier","actualTypeName","_actualPendingEventTypeName","prototype","installInto","expect","_installEqualityAssertions","_installQueriedFor","_installPendingEventType","_installWithEvent","_installWithEventOn","_installEventHandlerAssertions","installAlternativeExpected","expectedTypeName","getRenderOutput","actualRenderOutputType","getDiffInputFromRenderOutput","ActualAdapter","ExpectedAdapter","addAssertion","subject","renderOutput","actual","actualAdapter","includeKeyProp","expectedAdapter","testHtmlLike","setOptions","concatTextContent","diffResult","diff","withResult","result","weight","fail","output","inspect","append","render","clone","expected","not","containsResult","contains","found","error","nl","bestMatch","queryTypeName","rewrapResult","wrapResultForReturn","QueryAdapter","query","assertion","apply","concat","Array","slice","call","arguments","queryAdapter","findTargetAttrib","args","resultOutput","length","errorMode","s","target","bestMatchItem","shift","actualPendingEventTypeName","PENDING_EVENT_IDENTIFIER","addType","name","base","identify","value","$$typeof","depth","renderer","red","cyan","eventName","triggerEvent","canTriggerEventsOnOutputType","eventArgs","isOutputType","convertToString","newSubject"],"mappings":"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","file":"AssertionGenerator.js","sourcesContent":["import UnexpectedHtmlLike from 'unexpected-htmllike';\n\nconst PENDING_TEST_EVENT_TYPE = { dummy: 'Dummy object to identify a pending event on the test renderer' };\n\nfunction getDefaultOptions(flags) {\n  return {\n    diffWrappers: flags.exactly || flags.withAllWrappers,\n    diffExtraChildren: flags.exactly || flags.withAllChildren,\n    diffExtraAttributes: flags.exactly || flags.withAllAttributes,\n    diffExactClasses: flags.exactly,\n    diffExtraClasses: flags.exactly || flags.withAllClasses\n  };\n}\n\n/**\n *\n * @param options {object}\n * @param options.ActualAdapter {function} constructor function for the HtmlLike adapter for the `actual` value (usually the renderer)\n * @param options.ExpectedAdapter {function} constructor function for the HtmlLike adapter for the `expected` value\n * @param options.QueryAdapter {function} constructor function for the HtmlLike adapter for the query value (`queried for` and `on`)\n * @param options.actualTypeName {string} name of the unexpected type for the `actual` value\n * @param options.expectedTypeName {string} name of the unexpected type for the `expected` value\n * @param options.queryTypeName {string} name of the unexpected type for the query value (used in `queried for` and `on`)\n * @param options.actualRenderOutputType {string} the unexpected type for the actual output value\n * @param options.getRenderOutput {function} called with the actual value, and returns the `actualRenderOutputType` type\n * @param options.getDiffInputFromRenderOutput {function} called with the value from `getRenderOutput`, result passed to HtmlLike diff\n * @param options.rewrapResult {function} called with the `actual` value (usually the renderer), and the found result\n * @param options.wrapResultForReturn {function} called with the `actual` value (usually the renderer), and the found result\n * from HtmlLike `contains()` call (usually the same type returned from `getDiffInputFromRenderOutput`. Used to create a\n * value that can be passed back to the user as the result of the promise. Used by `queried for` when no further assertion is\n * provided, therefore the return value is provided as the result of the promise. If this is not present, `rewrapResult` is used.\n * @param options.triggerEvent {function} called the `actual` value (renderer), the optional target (or null) as the result\n * from the HtmlLike `contains()` call target, the eventName, and optional eventArgs when provided (undefined otherwise)\n * @constructor\n */\nfunction AssertionGenerator(options) {\n  this._options = Object.assign({}, options);\n  this._PENDING_EVENT_IDENTIFIER = (options.mainAssertionGenerator && options.mainAssertionGenerator.getEventIdentifier()) ||\n    { dummy: options.actualTypeName + 'PendingEventIdentifier' };\n  this._actualPendingEventTypeName = options.actualTypeName + 'PendingEvent';\n}\n\nAssertionGenerator.prototype.getEventIdentifier = function () {\n  return this._PENDING_EVENT_IDENTIFIER;\n};\n\nAssertionGenerator.prototype.installInto = function installInto(expect) {\n  this._installEqualityAssertions(expect);\n  this._installQueriedFor(expect);\n  this._installPendingEventType(expect);\n  this._installWithEvent(expect);\n  this._installWithEventOn(expect);\n  this._installEventHandlerAssertions(expect);\n};\n\nAssertionGenerator.prototype.installAlternativeExpected = function (expect) {\n  this._installEqualityAssertions(expect);\n  this._installEventHandlerAssertions(expect);\n};\n\nAssertionGenerator.prototype._installEqualityAssertions = function (expect) {\n  const {\n    actualTypeName, expectedTypeName,\n    getRenderOutput, actualRenderOutputType,\n    getDiffInputFromRenderOutput,\n    ActualAdapter, ExpectedAdapter\n  } = this._options;\n  \n  \n  expect.addAssertion([`<${actualTypeName}> to have [exactly] rendered <${expectedTypeName}>`,\n      `<${actualTypeName}> to have rendered [with all children] [with all wrappers] [with all classes] [with all attributes] <${expectedTypeName}>`],\n    function (expect, subject, renderOutput) {\n      var actual = getRenderOutput(subject);\n      return expect(actual, 'to have [exactly] rendered [with all children] [with all wrappers] [with all classes] [with all attributes]', renderOutput);\n    });\n  \n  expect.addAssertion([\n    `<${actualRenderOutputType}> to have [exactly] rendered <${expectedTypeName}>`,\n    `<${actualRenderOutputType}> to have rendered [with all children] [with all wrappers] [with all classes] [with all attributes] <${expectedTypeName}>`\n  ], function (expect, subject, renderOutput) {\n    \n    const exactly = this.flags.exactly;\n    const withAllChildren = this.flags['with all children'];\n    const withAllWrappers = this.flags['with all wrappers'];\n    const withAllClasses = this.flags['with all classes'];\n    const withAllAttributes = this.flags['with all attributes'];\n    \n    const actualAdapter = new ActualAdapter({ includeKeyProp: true });\n    const expectedAdapter = new ExpectedAdapter({ includeKeyProp: true });\n    const testHtmlLike = new UnexpectedHtmlLike(actualAdapter);\n    if (!exactly) {\n      expectedAdapter.setOptions({concatTextContent: true});\n      actualAdapter.setOptions({concatTextContent: true});\n    }\n    \n    const options = getDefaultOptions({exactly, withAllWrappers, withAllChildren, withAllClasses, withAllAttributes});\n    \n    const diffResult = testHtmlLike.diff(expectedAdapter, getDiffInputFromRenderOutput(subject), renderOutput, expect, options);\n    \n    return testHtmlLike.withResult(diffResult, result => {\n      \n      if (result.weight !== 0) {\n        return expect.fail({\n          diff: function (output, diff, inspect) {\n            return {\n              diff: output.append(testHtmlLike.render(result, output.clone(), diff, inspect))\n            };\n          }\n        });\n      }\n    });\n  });\n  \n  expect.addAssertion([`<${actualTypeName}> [not] to contain [exactly] <${expectedTypeName}|string>`,\n    `<${actualTypeName}> [not] to contain [with all children] [with all wrappers] [with all classes] [with all attributes] <${expectedTypeName}|string>`], function (expect, subject, renderOutput) {\n    var actual = getRenderOutput(subject);\n    return expect(actual, '[not] to contain [exactly] [with all children] [with all wrappers] [with all classes] [with all attributes]', renderOutput);\n  });\n  \n  expect.addAssertion([`<${actualRenderOutputType}> [not] to contain [exactly] <${expectedTypeName}|string>`,\n    `<${actualRenderOutputType}> [not] to contain [with all children] [with all wrappers] [with all classes] [with all attributes] <${expectedTypeName}|string>`], function (expect, subject, expected) {\n    \n    var not = this.flags.not;\n    var exactly = this.flags.exactly;\n    var withAllChildren = this.flags['with all children'];\n    var withAllWrappers = this.flags['with all wrappers'];\n    var withAllClasses = this.flags['with all classes'];\n    var withAllAttributes = this.flags['with all attributes'];\n    \n    var actualAdapter = new ActualAdapter({ includeKeyProp: true });\n    var expectedAdapter = new ExpectedAdapter({ includeKeyProp: true });\n    var testHtmlLike = new UnexpectedHtmlLike(actualAdapter);\n    if (!exactly) {\n      actualAdapter.setOptions({concatTextContent: true});\n      expectedAdapter.setOptions({concatTextContent: true});\n    }\n    \n    var options = getDefaultOptions({exactly, withAllWrappers, withAllChildren, withAllClasses, withAllAttributes});\n    \n    const containsResult = testHtmlLike.contains(expectedAdapter, getDiffInputFromRenderOutput(subject), expected, expect, options);\n    \n    return testHtmlLike.withResult(containsResult, result => {\n      \n      if (not) {\n        if (result.found) {\n          expect.fail({\n            diff: (output, diff, inspect) => {\n              return {\n                diff: output.error('but found the following match').nl().append(testHtmlLike.render(result.bestMatch, output.clone(), diff, inspect))\n              };\n            }\n          });\n        }\n        return;\n      }\n      \n      if (!result.found) {\n        expect.fail({\n          diff: function (output, diff, inspect) {\n            return {\n              diff: output.error('the best match was').nl().append(testHtmlLike.render(result.bestMatch, output.clone(), diff, inspect))\n            };\n          }\n        });\n      }\n    });\n  });\n  \n  // More generic assertions\n  expect.addAssertion(`<${actualTypeName}> to equal <${expectedTypeName}>`, function (expect, subject, expected) {\n    expect(getRenderOutput(subject), 'to equal', expected);\n  });\n  expect.addAssertion(`<${actualRenderOutputType}> to equal <${expectedTypeName}>`, function (expect, subject, expected) {\n    expect(subject, 'to have exactly rendered', expected);\n  });\n  \n  expect.addAssertion(`<${actualTypeName}> to satisfy <${expectedTypeName}>`, function (expect, subject, expected) {\n    expect(getRenderOutput(subject), 'to satisfy', expected);\n  });\n  \n  expect.addAssertion(`<${actualRenderOutputType}> to satisfy <${expectedTypeName}>`, function (expect, subject, expected) {\n    expect(subject, 'to have rendered', expected);\n  });\n};\n\nAssertionGenerator.prototype._installQueriedFor = function (expect) {\n  \n  const {\n    actualTypeName, queryTypeName,\n    getRenderOutput, actualRenderOutputType,\n    getDiffInputFromRenderOutput, rewrapResult, wrapResultForReturn,\n    ActualAdapter, QueryAdapter\n  } = this._options;\n  \n  expect.addAssertion([`<${actualTypeName}> queried for [exactly] <${queryTypeName}> <assertion?>`,\n    `<${actualTypeName}> queried for [with all children] [with all wrapppers] [with all classes] [with all attributes] <${queryTypeName}> <assertion?>`\n  ], function (expect, subject, query, assertion) {\n      return expect.apply(expect,\n        [\n          getRenderOutput(subject), 'queried for [exactly] [with all children] [with all wrappers] [with all classes] [with all attributes]', query\n        ].concat(Array.prototype.slice.call(arguments, 3)));\n  });\n  \n  expect.addAssertion([`<${actualRenderOutputType}> queried for [exactly] <${queryTypeName}> <assertion?>`,\n    `<${actualRenderOutputType}> queried for [with all children] [with all wrapppers] [with all classes] [with all attributes] <${queryTypeName}> <assertion?>`], function (expect, subject, query) {\n    \n    var exactly = this.flags.exactly;\n    var withAllChildren = this.flags['with all children'];\n    var withAllWrappers = this.flags['with all wrappers'];\n    var withAllClasses = this.flags['with all classes'];\n    var withAllAttributes = this.flags['with all attributes'];\n    \n    var actualAdapter = new ActualAdapter({ includeKeyProp: true });\n    var queryAdapter = new QueryAdapter({ includeKeyProp: true });\n    var testHtmlLike = new UnexpectedHtmlLike(actualAdapter);\n    if (!exactly) {\n      actualAdapter.setOptions({concatTextContent: true});\n      queryAdapter.setOptions({concatTextContent: true});\n    }\n    \n    const options = getDefaultOptions({exactly, withAllWrappers, withAllChildren, withAllClasses, withAllAttributes});\n    options.findTargetAttrib = 'queryTarget';\n    \n    const containsResult = testHtmlLike.contains(queryAdapter, getDiffInputFromRenderOutput(subject), query, expect, options);\n    \n    const args = arguments;\n    \n    return testHtmlLike.withResult(containsResult, function (result) {\n      \n      if (!result.found) {\n        expect.fail({\n          diff: (output, diff, inspect) => {\n            const resultOutput = {\n              diff: output.error('`queried for` found no match.')\n            };\n            if (result.bestMatch) {\n              resultOutput.diff.error('  The best match was')\n                .nl()\n                .append(testHtmlLike.render(result.bestMatch, output.clone(), diff, inspect));\n            }\n            return resultOutput;\n          }\n        });\n      }\n      \n      if (args.length > 3) {\n        // There is an assertion continuation...\n        expect.errorMode = 'nested';\n        const s = rewrapResult(subject, result.bestMatch.target || result.bestMatchItem);\n        return expect.apply(null,\n          [\n            rewrapResult(subject, result.bestMatch.target || result.bestMatchItem)\n          ].concat(Array.prototype.slice.call(args, 3)))\n        return expect.shift(rewrapResult(subject, result.bestMatch.target || result.bestMatchItem));\n      }\n      // There is no assertion continuation, so we need to wrap the result for public consumption\n      // i.e. create a value that we can give back from the `expect` promise\n      return expect.shift((wrapResultForReturn || rewrapResult)(subject, result.bestMatch.target || result.bestMatchItem));\n    });\n  });\n  \n};\n\nAssertionGenerator.prototype._installPendingEventType = function (expect) {\n  \n  const actualPendingEventTypeName = this._actualPendingEventTypeName;\n  \n  const PENDING_EVENT_IDENTIFIER = this._PENDING_EVENT_IDENTIFIER;\n  \n  expect.addType({\n    name: actualPendingEventTypeName,\n    base: 'object',\n    identify(value) {\n      return value && typeof value === 'object' && value.$$typeof === PENDING_EVENT_IDENTIFIER;\n    },\n    inspect(value, depth, output, inspect) {\n      return output.append(inspect(value.renderer)).red(' with pending event \\'').cyan(value.eventName).red('\\'');\n    }\n  });\n};\n\nAssertionGenerator.prototype._installWithEvent = function (expect) {\n  \n  const { actualTypeName, actualRenderOutputType, triggerEvent, canTriggerEventsOnOutputType } = this._options;\n  let { wrapResultForReturn = (value) => value } = this._options;\n  \n  const actualPendingEventTypeName = this._actualPendingEventTypeName;\n  \n  const PENDING_EVENT_IDENTIFIER = this._PENDING_EVENT_IDENTIFIER;\n  \n  expect.addAssertion(`<${actualTypeName}> with event <string> <assertion?>`, function (expect, subject, eventName, ...assertion) {\n    if (arguments.length > 3) {\n      return expect.apply(null, [{\n        $$typeof: PENDING_EVENT_IDENTIFIER,\n        renderer: subject,\n        eventName: eventName\n      }].concat(assertion));\n    } else {\n      triggerEvent(subject, null, eventName);\n      return expect.shift(wrapResultForReturn(subject));\n    }\n  });\n  \n  \n  expect.addAssertion(`<${actualTypeName}> with event <string> <object> <assertion?>`, function (expect, subject, eventName, args) {\n    if (arguments.length > 4) {\n      return expect.shift({\n        $$typeof: PENDING_EVENT_IDENTIFIER,\n        renderer: subject,\n        eventName: eventName,\n        eventArgs: args\n      });\n    } else {\n      triggerEvent(subject, null, eventName, args);\n      return expect.shift(wrapResultForReturn(subject));\n    }\n  });\n  \n  if (canTriggerEventsOnOutputType) {\n    \n    expect.addAssertion(`<${actualRenderOutputType}> with event <string> <assertion?>`, function (expect, subject, eventName, ...assertion) {\n      if (arguments.length > 3) {\n        expect.errorMode = 'bubble';\n        return expect.apply(null, [{\n          $$typeof: PENDING_EVENT_IDENTIFIER,\n          renderer: subject,\n          eventName: eventName,\n          isOutputType: true\n        }].concat(assertion));\n      } else {\n        triggerEvent(subject, null, eventName);\n        return expect.shift(wrapResultForReturn(subject));\n      }\n    });\n    \n    expect.addAssertion(`<${actualRenderOutputType}> with event <string> <object> <assertion?>`, function (expect, subject, eventName, args) {\n      if (arguments.length > 4) {\n        return expect.shift({\n          $$typeof: PENDING_EVENT_IDENTIFIER,\n          renderer: subject,\n          eventName: eventName,\n          eventArgs: args,\n          isOutputType: true\n        });\n      } else {\n        triggerEvent(subject, null, eventName, args);\n        return expect.shift(subject);\n      }\n    });\n    \n  }\n  \n  expect.addAssertion(`<${actualPendingEventTypeName}> [and] with event <string> <assertion?>`,\n    function (expect, subject, eventName) {\n      triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n      if (arguments.length > 3) {\n        return expect.shift({\n          $$typeof: PENDING_EVENT_IDENTIFIER,\n          renderer: subject.renderer,\n          eventName: eventName\n        });\n      } else {\n        triggerEvent(subject.renderer, null, eventName);\n        return expect.shift(wrapResultForReturn(subject.renderer));\n      }\n    });\n  \n  expect.addAssertion(`<${actualPendingEventTypeName}> [and] with event <string> <object> <assertion?>`,\n    function (expect, subject, eventName, eventArgs) {\n      \n      triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n      if (arguments.length > 4) {\n        return expect.shift({\n          $$typeof: PENDING_EVENT_IDENTIFIER,\n          renderer: subject.renderer,\n          eventName: eventName,\n          eventArgs: eventArgs\n        });\n      } else {\n        triggerEvent(subject.renderer, null, eventName, eventArgs);\n        return expect.shift(wrapResultForReturn(subject.renderer));\n      }\n    });\n  \n};\n\nAssertionGenerator.prototype._installWithEventOn = function (expect) {\n  \n  const {\n    actualTypeName, queryTypeName, expectedTypeName,\n    getRenderOutput,\n    getDiffInputFromRenderOutput, triggerEvent,\n    wrapResultForReturn,\n    ActualAdapter, QueryAdapter\n  } = this._options;\n  \n  const actualPendingEventTypeName = this._actualPendingEventTypeName;\n  \n  expect.addAssertion(`<${actualPendingEventTypeName}> on [exactly] [with all children] [with all wrappers] [with all classes] [with all attributes]<${queryTypeName}> <assertion?>`,\n    function (expect, subject, target) {\n      const actualAdapter = new ActualAdapter({ includeKeyProp: true, convertToString: true, concatTextContent: true });\n      const queryAdapter = new QueryAdapter({ includeKeyProp: true, convertToString: true, concatTextContent: true });\n      const testHtmlLike = new UnexpectedHtmlLike(actualAdapter);\n      \n      const exactly = this.flags.exactly;\n      const withAllChildren = this.flags['with all children'];\n      const withAllWrappers = this.flags['with all wrappers'];\n      const withAllClasses = this.flags['with all classes'];\n      const withAllAttributes = this.flags['with all attributes'];\n      \n      const options = getDefaultOptions({ exactly, withAllWrappers, withAllChildren, withAllClasses, withAllAttributes});\n      options.findTargetAttrib = 'eventTarget';\n      const containsResult = testHtmlLike.contains(queryAdapter, getDiffInputFromRenderOutput(getRenderOutput(subject.renderer)), target, expect, options);\n      return testHtmlLike.withResult(containsResult, result => {\n        if (!result.found) {\n          return expect.fail({\n            diff: function (output, diff, inspect) {\n              output.error('Could not find the target for the event. ');\n              if (result.bestMatch) {\n                output.error('The best match was').nl().nl().append(testHtmlLike.render(result.bestMatch, output.clone(), diff, inspect));\n              }\n              return output;\n            }\n          });\n        }\n        \n        const newSubject = Object.assign({}, subject, {\n          target: result.bestMatch.target || result.bestMatchItem\n        });\n        \n        if (arguments.length > 3) {\n          return expect.shift(newSubject);\n        } else {\n          triggerEvent(newSubject.renderer, newSubject.target, newSubject.eventName, newSubject.eventArgs);\n          return expect.shift(wrapResultForReturn(newSubject.renderer));\n        }\n      });\n    });\n  \n  expect.addAssertion([`<${actualPendingEventTypeName}> queried for [exactly] <${queryTypeName}> <assertion?>`,\n      `<${actualPendingEventTypeName}> queried for [with all children] [with all wrappers] [with all classes] [with all attributes] <${queryTypeName}> <assertion?>`],\n    function (expect, subject, expected) {\n      \n      triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n      return expect.apply(expect,\n        [subject.renderer, 'queried for [exactly] [with all children] [with all wrappers] [with all classes] [with all attributes]', expected]\n          .concat(Array.prototype.slice.call(arguments, 3)));\n    }\n  );\n};\n\nAssertionGenerator.prototype._installEventHandlerAssertions = function (expect) {\n  const { actualTypeName, expectedTypeName, triggerEvent } = this._options;\n  \n  const actualPendingEventTypeName = this._actualPendingEventTypeName;\n\n  expect.addAssertion([`<${actualPendingEventTypeName}> [not] to contain [exactly] <${expectedTypeName}>`,\n    `<${actualPendingEventTypeName}> [not] to contain [with all children] [with all wrappers] [with all classes] [with all attributes] <${expectedTypeName}>`],\n    function (expect, subject, expected) {\n      triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n      return expect(subject.renderer, '[not] to contain [exactly] [with all children] [with all wrappers] [with all classes] [with all attributes]', expected);\n  });\n  \n  expect.addAssertion(`<${actualPendingEventTypeName}> to have [exactly] rendered [with all children] [with all wrappers] [with all classes] [with all attributes] <${expectedTypeName}>`,\n    function (expect, subject, expected) {\n      triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n      return expect(subject.renderer, 'to have [exactly] rendered [with all children] [with all wrappers] [with all classes] [with all attributes]', expected);\n    });\n};\n\n\nexport default AssertionGenerator;\n"]}