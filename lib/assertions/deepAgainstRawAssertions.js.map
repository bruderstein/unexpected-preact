{"version":3,"sources":["../../src/assertions/deepAgainstRawAssertions.js"],"names":["getOptions","expect","prototype","classAttributeName","ActualAdapter","QueryAdapter","ExpectedAdapter","actualTypeName","queryTypeName","expectedTypeName","getRenderOutput","component","type","COMPONENT_TYPE","NODE_TYPE","wrapRootNode","actualRenderOutputType","getDiffInputFromRenderOutput","renderOutput","rewrapResult","renderer","target","wrapResultForReturn","result","node","triggerEvent","bind","canTriggerEventsOnOutputType","installInto","assertionGenerator","addAssertion","checkAttached","installAsAlternative","mainAssertionGenerator","generatorOptions","installAlternativeExpected"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC1B;AACA,yCAAWC,SAAX,CAAqBC,kBAArB,GAA0C,OAA1C;;AAEA,SAAO;AACLC,oEADK;AAELC,2DAFK;AAGLC,2DAHK;AAILC,oBAAgB,uBAJX;AAKLC,mBAAe,eALV;AAMLC,sBAAkB,uBANb;AAOLC,qBAAiB,oCAAa;AAC5B,UAAIC,aACF,QAAOA,SAAP,yCAAOA,SAAP,OAAqB,QADnB,KAEDA,UAAUC,IAAV,KAAmB,kDAAsBC,cAAzC,IACDF,UAAUC,IAAV,KAAmB,kDAAsBE,SAHvC,CAAJ,EAGuD;AACrD,eAAOH,SAAP;AACD;AACD,aAAO,kDAAsBI,YAAtB,CAAmCJ,SAAnC,CAAP;AACD,KAfI;AAgBLK,4BAAwB,8BAhBnB;AAiBLC,kCAA8B;AAAA,aAAgBC,YAAhB;AAAA,KAjBzB;AAkBLC,kBAAc,sBAACC,QAAD,EAAWC,MAAX;AAAA,aAAsBA,MAAtB;AAAA,KAlBT;AAmBLC,yBAAqB,6BAACX,SAAD,EAAYU,MAAZ,EAAuB;AAC1C,UAAME,SAAUF,UAAUV,SAA1B;AACA,UAAI,CAACY,MAAL,EAAa;AACX,eAAOA,MAAP;AACD;AACD,UAAIA,OAAOX,IAAP,KAAgB,kDAAsBC,cAA1C,EAA0D;AACxD,eAAOU,OAAOZ,SAAd;AACD;AACD,UAAIY,OAAOX,IAAP,KAAgB,kDAAsBE,SAA1C,EAAqD;AACnD,eAAOS,OAAOC,IAAd;AACD;AACD,aAAOD,MAAP;AACD,KA/BI;AAgCLE,kBAAc,6BAAaC,IAAb,CAAkB,IAAlB,EAAwBzB,MAAxB,CAhCT;AAiCL0B,kCAA8B;AAjCzB,GAAP;AAmCD;;AAED,SAASC,WAAT,CAAqB3B,MAArB,EAA6B;AAC3B,MAAM4B,qBAAqB,iCAAuB7B,WAAWC,MAAX,CAAvB,CAA3B;AACA4B,qBAAmBD,WAAnB,CAA+B3B,MAA/B;;AAEAA,SAAO6B,YAAP,CAAoB,qCAApB,EAA2D,UAAU7B,MAAV,EAAkB;AAC3E8B,kBAAc9B,MAAd;AACD,GAFD;;AAIA,SAAO4B,kBAAP;AACD;;AAED,SAASG,oBAAT,CAA8B/B,MAA9B,EAAsCgC,sBAAtC,EAA8D;AAC5D,MAAMC,mBAAmBlC,WAAWC,MAAX,CAAzB;AACA,MAAM4B,qBAAqB,4CAAyBI,8CAAzB,IAAoDC,gBAApD,EAA3B;AACAL,qBAAmBM,0BAAnB,CAA8ClC,MAA9C;AACD;;QAEQ2B,W,GAAAA,W;QAAaI,oB,GAAAA,oB;QAAsBP,Y","file":"deepAgainstRawAssertions.js","sourcesContent":["import UnexpectedHtmlLike from 'unexpected-htmllike';\nimport PreactRenderedAdapter from 'unexpected-htmllike-preactrendered-adapter';\nimport PreactElementAdapter from 'unexpected-htmllike-preact-adapter';\nimport RawAdapter from 'unexpected-htmllike-raw-adapter';\nimport Preact from 'preact';\nimport AssertionGenerator from './AssertionGenerator';\nimport { triggerEvent } from './deepAssertions';\n\nfunction getOptions(expect) {\n  // Override the classAttributeName as we're always comparing against `class` here\n  RawAdapter.prototype.classAttributeName = 'class';\n\n  return {\n    ActualAdapter: PreactRenderedAdapter,\n    QueryAdapter: PreactElementAdapter,\n    ExpectedAdapter: RawAdapter,\n    actualTypeName: 'RenderedPreactElement',\n    queryTypeName: 'PreactElement',\n    expectedTypeName: 'ReactRawObjectElement',\n    getRenderOutput: component => {\n      if (component &&\n        typeof component === 'object' &&\n        (component.type === PreactRenderedAdapter.COMPONENT_TYPE ||\n        component.type === PreactRenderedAdapter.NODE_TYPE)) {\n        return component;\n      }\n      return PreactRenderedAdapter.wrapRootNode(component);\n    },\n    actualRenderOutputType: 'RenderedPreactElementWrapper',\n    getDiffInputFromRenderOutput: renderOutput => renderOutput,\n    rewrapResult: (renderer, target) => target,\n    wrapResultForReturn: (component, target) => {\n      const result = (target || component);\n      if (!result) {\n        return result;\n      }\n      if (result.type === PreactRenderedAdapter.COMPONENT_TYPE) {\n        return result.component;\n      }\n      if (result.type === PreactRenderedAdapter.NODE_TYPE) {\n        return result.node;\n      }\n      return result;\n    },\n    triggerEvent: triggerEvent.bind(null, expect),\n    canTriggerEventsOnOutputType: true\n  };\n}\n\nfunction installInto(expect) {\n  const assertionGenerator = new AssertionGenerator(getOptions(expect));\n  assertionGenerator.installInto(expect);\n  \n  expect.addAssertion('<ReactModule> to have been injected', function (expect) {\n    checkAttached(expect);\n  });\n  \n  return assertionGenerator;\n}\n\nfunction installAsAlternative(expect, mainAssertionGenerator) {\n  const generatorOptions = getOptions(expect);\n  const assertionGenerator = new AssertionGenerator({ mainAssertionGenerator, ...generatorOptions });\n  assertionGenerator.installAlternativeExpected(expect);\n}\n\nexport { installInto, installAsAlternative, triggerEvent };\n"]}