{"version":3,"sources":["../../src/tests/snapshot.spec.js"],"names":["loadSnapshotMock","snapshotPath","snapModule","load","exports","expect","clone","use","output","preferredWidth","promisifyAll","fixtures","renderIntoDocument","element","container","document","createElement","render","describe","PATH_TO_TESTS","state","removeUncheckedKeysStub","before","done","readdirAsync","join","__dirname","then","all","dirList","map","readFileAsync","entry","basename","data","toString","catch","e","beforeEach","stub","testPath","currentTestName","snapshotState","added","updated","unmatched","update","undefined","removeUncheckedKeys","setState","spy","afterEach","writeFileSync","restore","single","multiple","multipleclasses","initState","options","testName","unexpectedSnapshot","it","renderer","console","log","__preactattr_","matched","and","newSnapshot","type","children","snapshot","anonymous","boundContentArgs","namedContentArgs","unlinkSync","originalSnapshot","Object","keys","args"],"mappings":"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","file":"snapshot.spec.js","sourcesContent":["'use strict';\nimport './helpers/emulateDom'\nimport ClickCounter from './components/ClickCounter';\nimport fs from 'fs';\nimport mockFs from 'mock-fs';\nimport Module from 'module';\n\nimport path from 'path';\nimport Promise from 'bluebird';\n\nimport Preact, {h} from 'preact';\nimport Sinon from 'sinon';\nimport { injectLoader } from '../helpers/snapshotLoader';\nimport Unexpected from 'unexpected';\nimport UnexpectedSinon from 'unexpected-sinon';\n// Note: These are imported later than the others, so that jasmine is mocked for the jest-matchers, but\n// unexpected does not think it's running under jasmine\nimport mockJasmine from './helpers/mock-jasmine';\nimport JestMatchers from 'jest-matchers';\nimport UnexpectedPreact from '../jest'\nimport functionFixtures from './fixtures/functions';\nimport { injectStateHooks } from '../helpers/snapshots';\n\nfunction loadSnapshotMock(snapshotPath) {\n  const snapModule = new Module(snapshotPath, null);\n  snapModule.load(snapshotPath);\n  return snapModule.exports;\n}\n\ninjectLoader(loadSnapshotMock);\n\n\nconst expect = Unexpected.clone()\n  .use(UnexpectedPreact)\n  .use(UnexpectedSinon);\n\nexpect.output.preferredWidth = 80;\n\nPromise.promisifyAll(fs);\n\nconst fixtures = {};\n\nfunction renderIntoDocument(element) {\n  const container = document.createElement('div');\n  return Preact.render(element, container);\n}\n\ndescribe('snapshots', function () {\n\n  const PATH_TO_TESTS = '/path/to/tests';\n  let state, removeUncheckedKeysStub;\n\n  before(function (done) {\n    fs.readdirAsync(path.join(__dirname, './fixtures'))\n      .then(dirList => {\n        return Promise.all(dirList.map(entry => {\n          return fs.readFileAsync(path.join(__dirname, './fixtures', entry))\n            .then(data => {\n              fixtures[path.basename(entry, '.snapshot')] = data.toString('utf-8');\n            });\n        }));\n      }).then(() => done())\n      .catch(e => done(e));\n  });\n\n  beforeEach(function () {\n    removeUncheckedKeysStub = Sinon.stub();\n    state = {\n      testPath: '/tmp/changeme.js',\n      currentTestName: 'foo',\n      snapshotState: {\n        added: 0,\n        updated: 0,\n        unmatched: 0,\n        update: undefined,\n        removeUncheckedKeys: removeUncheckedKeysStub\n      }\n    };\n    JestMatchers.setState(state);\n    Sinon.spy(fs, 'writeFileSync');\n    injectStateHooks();\n  });\n  \n  afterEach(function () {\n    fs.writeFileSync.restore();\n  });\n  beforeEach(function () {\n    mockFs({\n      [PATH_TO_TESTS + '/__snapshots__/single.spec.unexpected-snap']: fixtures.single,\n      [PATH_TO_TESTS + '/__snapshots__/multiple.spec.unexpected-snap']: fixtures.multiple,\n      [PATH_TO_TESTS + '/__snapshots__/multipleclasses.spec.unexpected-snap']: fixtures.multipleclasses,\n    });\n  });\n  \n  afterEach(function () {\n    mockFs.restore();\n  });\n  \n  \n  function initState(options) {\n    state.testPath = path.join(PATH_TO_TESTS, options.testPath);\n    state.currentTestName = options.testName;\n    state.unexpectedSnapshot = null;\n    if (options.update) {\n      state.snapshotState.update = options.update;\n    }\n    JestMatchers.setState(state);\n  }\n  \n  it('passes a single test snapshot', function () {\n    \n    initState({\n      testPath: 'single.spec.js',\n      testName: 'single test name'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter />);\n\n    console.log(renderer.__preactattr_)\n    expect(renderer, 'to match snapshot');\n    expect(fs.writeFileSync, 'was not called')\n  });\n  \n  it('updates the `matched` count', function () {\n    \n    initState({\n      testPath: 'single.spec.js',\n      testName: 'single test name'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter />);\n    \n    expect(renderer, 'to match snapshot');\n    expect(state.snapshotState, 'to satisfy', {\n      matched: 1\n    });\n  });\n  \n  it('passes multiple test snapshots', function () {\n    \n    initState({\n      testPath: 'single.spec.js',\n      testName: 'single test name'\n    });\n    const renderer = renderIntoDocument(<ClickCounter />);\n    \n    expect(renderer, 'to match snapshot');\n    expect(renderer, 'with event', 'click', 'to match snapshot');\n    expect(fs.writeFileSync, 'was not called')\n  });\n  \n  describe('for an unknown test', function () {\n    \n    let snapshotPath;\n    beforeEach(function () {\n      \n      initState({\n        testPath: 'single.spec.js',\n        testName: 'a new test'\n      });\n      const renderer = renderIntoDocument(<ClickCounter />);\n      \n      snapshotPath = path.join(PATH_TO_TESTS, '__snapshots__/single.spec.unexpected-snap');\n      expect(renderer, 'to match snapshot');\n    });\n    \n    it('writes a new snapshot', function () {\n      \n      // Confirm we wrote the file with the old and new entries\n      expect(fs.writeFileSync, 'to have a call satisfying', [\n        snapshotPath,\n        expect.it('to match', /exports\\[`a new test 1`]/)\n          .and('to match', /exports\\[`single test name 1`]/)\n      ]);\n    });\n\n    it('writes a new snapshot comment', function () {\n\n      // Confirm we wrote the file with the old and new entries\n      expect(fs.writeFileSync, 'to have a call satisfying', [\n        snapshotPath,\n        expect.it('to match', /\\/\\/ <button onClick={/)\n            .and('to match', /\\/\\/ <\\/button>/)\n            .and('not to match', /\\/\\/\\s*children:/)\n      ]);\n    });\n\n    it('creates the correct snapshot', function () {\n      // Confirm it is parseable and contains the right thing\n      const newSnapshot = loadSnapshotMock(snapshotPath);\n      expect(newSnapshot['a new test 1'], 'to satisfy', {\n        type: 'button',\n        children: ['Clicked 0 times']\n      });\n    });\n\n    it('increments the added count in the state', function () {\n      expect(state, 'to satisfy', {\n        snapshotState: {\n          added: 1\n        }\n      });\n    });\n    \n  });\n  \n  it('fails on a snapshot that doesn`t match', function () {\n    initState({\n      testPath: 'single.spec.js',\n      testName: 'single test name'\n    });\n    const renderer = renderIntoDocument(<ClickCounter />);\n    expect(\n      () => expect(renderer, 'with event click', 'to match snapshot'),\n      'to throw',\n      [\n        'expected',\n        '<ClickCounter>',\n        '  <button onClick={function bound onClick() { /* native code */ }}>',\n        '    Clicked 1 times',\n        '  </button>',\n        '</ClickCounter>',\n        \"with event 'click' to match snapshot\",\n        '',\n        '<button onClick={function bound onClick() { /* native code */ }}>',\n        '  Clicked 1 times // -Clicked 1 times',\n        '                  // +Clicked 0 times',\n        '</button>'\n      ].join('\\n')\n    );\n  });\n  \n  it('matches classes in the wrong order', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter className=\"three two one\" />);\n    expect(renderer, 'to match snapshot');\n  });\n  \n  it('diffs missing classes', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter className=\"three one\" />);\n    expect(() => expect(renderer, 'to match snapshot'), 'to throw',\n    [\n      'expected',\n      '<ClickCounter class=\"three one\">',\n      '  <button onClick={function bound onClick() { /* native code */ }} class=\"three one\">',\n      '    Clicked 0 times',\n      '  </button>',\n      '</ClickCounter>',\n      'to match snapshot',\n      '',\n      '<button onClick={function bound onClick() { /* native code */ }}',\n      '   class=\"three one\" // missing class \\'two\\'',\n      '>',\n      '  Clicked 0 times',\n      '</button>'\n    ].join('\\n'))\n  });\n  \n  it('diffs extra classes', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter className=\"three two one four\" />);\n    expect(() => expect(renderer, 'to match snapshot'), 'to throw',\n      [\n        'expected',\n        '<ClickCounter class=\"three two one four\">',\n        '  <button onClick={function bound onClick() { /* native code */ }}',\n        '     class=\"three two one four\">',\n        '    Clicked 0 times',\n        '  </button>',\n        '</ClickCounter>',\n        'to match snapshot',\n        '',\n        '<button onClick={function bound onClick() { /* native code */ }}',\n        '   class=\"three two one four\" // extra class \\'four\\'',\n        '>',\n        '  Clicked 0 times',\n        '</button>'\n      ].join('\\n'))\n  });\n  \n  it('diffs extra attributes', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes'\n    });\n  \n    const renderer = renderIntoDocument(<ClickCounter className=\"three two one\" ariaLabel=\"testextra\" />);\n    expect(() => expect(renderer, 'to match snapshot'), 'to throw',\n      [\n        'expected',\n        '<ClickCounter ariaLabel=\"testextra\" class=\"three two one\">',\n        '  <button onClick={function bound onClick() { /* native code */ }} ariaLabel=\"testextra\"',\n        '     class=\"three two one\">',\n        '    Clicked 0 times',\n        '  </button>',\n        '</ClickCounter>',\n        'to match snapshot',\n        '',\n        '<button onClick={function bound onClick() { /* native code */ }}',\n        '   ariaLabel=\"testextra\" // ariaLabel should be removed',\n        '   class=\"three two one\">',\n        '  Clicked 0 times',\n        '</button>'\n      ].join('\\n'))\n  });\n  \n  it('allows extra attributes with `to satisfy snapshot`', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes'\n    });\n  \n    const renderer = renderIntoDocument(<ClickCounter className=\"three two one\" ariaLabel=\"testextra\" />);\n    expect(renderer, 'to satisfy snapshot');\n    \n  });\n  \n  it('allows extra classes with `to satisfy snapshot`', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter className=\"three two one four\" />);\n    expect(renderer, 'to satisfy snapshot');\n  });\n  \n  it('allows extra classes with `to satisfy snapshot` after event ', function () {\n    initState({\n      testPath: 'multipleclasses.spec.js',\n      testName: 'multiple classes click'\n    });\n    \n    const renderer = renderIntoDocument(<ClickCounter className=\"three two one four\" />);\n    expect(renderer, 'with event click', 'to satisfy snapshot');\n  });\n  \n  it('increments `unmatched` when a snapshot doesn`t match', function () {\n    initState({\n      testPath: 'single.spec.js',\n      testName: 'single test name'\n    });\n    const renderer = renderIntoDocument(<ClickCounter />);\n    expect(\n      () => expect(renderer, 'with event click', 'to match snapshot'),\n      'to throw');\n    expect(state, 'to satisfy', {\n      snapshotState: {\n        unmatched: 1\n      }\n    });\n  });\n  \n  describe('when update is true and the snapshot matches', function () {\n  \n    beforeEach(function () {\n      initState({\n        testPath: 'single.spec.js',\n        testName: 'single test name',\n        update: true\n      });\n      const renderer = renderIntoDocument(<ClickCounter />);\n      expect(renderer, 'to match snapshot');\n    });\n    \n    it('increments `matched`', function () {\n      \n      expect(state, 'to satisfy', {\n        snapshotState: {\n          updated: 0,\n          added: 0,\n          matched: 1,\n          update: true\n        }\n      });\n    });\n  });\n  \n  describe('when update is true and the snapshot doesn`t match', function () {\n    \n    let snapshotPath;\n    beforeEach(function () {\n      initState({\n        testPath: 'single.spec.js',\n        testName: 'single test name',\n        update: true\n      });\n      const renderer = renderIntoDocument(<ClickCounter />);\n      snapshotPath = path.join(PATH_TO_TESTS, '__snapshots__/single.spec.unexpected-snap');\n      expect(renderer, 'with event click', 'to match snapshot');\n    });\n  \n    it('increments `updated`', function () {\n    \n      expect(state, 'to satisfy', {\n        snapshotState: {\n          updated: 1,\n          added: 0,\n          update: true\n        }\n      });\n    });\n    \n    it('writes the new snapshot', function () {\n      expect(fs.writeFileSync, 'to have calls satisfying', [\n        [\n          snapshotPath,\n          expect.it('to match', /exports\\[`single test name 1`]/)\n        ]\n      ]);\n    });\n\n    it('writes the new snapshot comment', function () {\n      expect(fs.writeFileSync, 'to have calls satisfying', [\n        [\n          snapshotPath,\n          expect.it('to match', /\\/\\/ <button onClick={/)\n              .and('to match', /\\/\\/ <\\/button>/)\n              .and('not to match', /\\/\\/\\s*children:/)\n        ]\n      ]);\n    });\n\n    it('writes the correct snapshot', function () {\n      const snapshot = loadSnapshotMock(snapshotPath);\n      expect(snapshot, 'to satisfy', {\n        'single test name 1': {\n          type: 'button',\n          children: [ 'Clicked 1 times' ]\n        }\n      });\n    });\n    \n  });\n  \n  describe('with functions', function () {\n    it('compares with a snapshot with a normal function', function () {\n  \n      initState({\n        testPath: 'withFunctions.spec.js',\n        testName: 'with functions',\n      });\n      let renderer = renderIntoDocument(<ClickCounter onMouseDown={functionFixtures.anonymous()} />);\n      expect(renderer, 'to match snapshot');\n      \n      // Now reset state back such that it actually tests the snapshot\n      initState({\n        testPath: 'withFunctions.spec.js',\n        testName: 'with functions',\n      });\n      // Rerender, with a new instance of the anonymous function\n      renderer = renderIntoDocument(<ClickCounter onMouseDown={functionFixtures.anonymous()} />);\n      expect(renderer, 'to match snapshot');\n    });\n  \n    it('compares with a snapshot with a bound function', function () {\n    \n      initState({\n        testPath: 'withFunctions.spec.js',\n        testName: 'with functions',\n      });\n      let renderer = renderIntoDocument(<ClickCounter onMouseDown={functionFixtures.boundContentArgs()} />);\n      expect(renderer, 'to match snapshot');\n    \n      // Now reset state back such that it actually tests the snapshot\n      initState({\n        testPath: 'withFunctions.spec.js',\n        testName: 'with functions',\n      });\n      // Rerender, with a new instance of the function\n      renderer = renderIntoDocument(<ClickCounter onMouseDown={functionFixtures.boundContentArgs()} />);\n      expect(renderer, 'to match snapshot');\n    });\n  \n    it('fails with a snapshot with a normal function when the expected is bound', function () {\n    \n      initState({\n        testPath: 'withFunctions.spec.js',\n        testName: 'with functions',\n      });\n      let renderer = renderIntoDocument(<ClickCounter onMouseDown={functionFixtures.boundContentArgs()} />);\n      // Create the snapshot with the bound function\n      expect(renderer, 'to match snapshot');\n    \n      // Now reset state back such that it actually tests the snapshot\n      initState({\n        testPath: 'withFunctions.spec.js',\n        testName: 'with functions',\n      });\n      // Rerender, with a different unbound function\n      renderer = renderIntoDocument(<ClickCounter onMouseDown={functionFixtures.namedContentArgs()} />);\n      expect(\n        () => expect(renderer, 'to match snapshot'),\n        'to throw',\n        [\n          'expected',\n          '<ClickCounter onMouseDown={function doStuff(a, b) { /* ... */ }}>',\n          '  <button onClick={function bound onClick() { /* native code */ }}',\n          '     onMouseDown={function doStuff(a, b) { /* ... */ }}>',\n          '    Clicked 0 times',\n          '  </button>',\n          '</ClickCounter>',\n          'to match snapshot',\n          '',\n          '<button onClick={function bound onClick() { /* native code */ }}',\n          '   onMouseDown={function doStuff(a, b) { /* ... */ }} // expected',\n          '                                                      // function doStuff(a, b) {',\n          '                                                      //   // comment',\n          '                                                      //   return a + b;',\n          '                                                      // }',\n          '                                                      // to satisfy function bound bound3() { /* function body */ }',\n          '                                                      //',\n          '                                                      // -function doStuff(a, b) { /* function body */ }',\n          '                                                      // +function bound bound3() { /* function body */ }',\n          '>',\n          '  Clicked 0 times',\n          '</button>'\n        ].join('\\n')\n      );\n    });\n  });\n  \n  describe('removing unused keys', function () {\n    \n    it('removes the unused snapshot file when removeUnusedKeys is called', function () {\n      initState({\n        testPath: 'single.spec.js',\n        testName: 'single test name',\n        update: true\n      });\n      Sinon.spy(fs, 'unlinkSync');\n      \n      try {\n        // removeUncheckedKeys is called by Jest when update is true\n        state.snapshotState.removeUncheckedKeys();\n        expect(fs.unlinkSync, 'to have calls satisfying', [\n          [path.join(PATH_TO_TESTS, '__snapshots__/single.spec.unexpected-snap')]\n        ]);\n      } finally {\n        fs.unlinkSync.restore();\n      }\n      \n    });\n    \n    it('removes the unused keys of a test where only some are used', function () {\n  \n      initState({\n        testPath: 'multiple.spec.js',\n        testName: 'multi test two',\n        update: true\n      });\n      \n      const renderer = renderIntoDocument(<ClickCounter />);\n      expect(renderer, 'with event click', 'to match snapshot');\n  \n      const originalSnapshot = loadSnapshotMock(path.join(PATH_TO_TESTS, '__snapshots__/multiple.spec.unexpected-snap'));\n      \n      state.snapshotState.removeUncheckedKeys();\n      const newSnapshot = loadSnapshotMock(path.join(PATH_TO_TESTS, '__snapshots__/multiple.spec.unexpected-snap'));\n  \n      expect(Object.keys(originalSnapshot), 'to equal', [ 'multi test one 1', 'multi test two 1', 'multi test two 2' ]);\n      expect(Object.keys(newSnapshot), 'to equal', [ 'multi test two 1']);\n    });\n    \n    it('calls the original removeUncheckedKeys', function () {\n      initState({\n        testPath: 'multiple.spec.js',\n        testName: 'multi test two',\n        update: true\n      });\n  \n      const renderer = renderIntoDocument(<ClickCounter />);\n      expect(renderer, 'with event click', 'to match snapshot');\n  \n      state.snapshotState.removeUncheckedKeys();\n      \n      expect(removeUncheckedKeysStub, 'to have calls satisfying', [\n        { args: [], 'this': state.snapshotState }\n      ]);\n    });\n  });\n  \n  it('leaves snapshots of tests that failed', function () {\n  \n    initState({\n      testPath: 'multiple.spec.js',\n      testName: 'multi test two'\n    });\n  \n    const renderer = renderIntoDocument(<ClickCounter />);\n    expect(\n      () => expect(renderer, 'to match snapshot'),\n      'to throw');\n  \n    const originalSnapshot = loadSnapshotMock(path.join(PATH_TO_TESTS, '__snapshots__/multiple.spec.unexpected-snap'));\n  \n    state.snapshotState.removeUncheckedKeys();\n    const newSnapshot = loadSnapshotMock(path.join(PATH_TO_TESTS, '__snapshots__/multiple.spec.unexpected-snap'));\n  \n    expect(Object.keys(originalSnapshot), 'to equal', [ 'multi test one 1', 'multi test two 1', 'multi test two 2' ]);\n    expect(Object.keys(newSnapshot), 'to equal', [ 'multi test two 1', 'multi test two 2' ]);\n  });\n  \n  it('removes a file if there are no snapshots', function () {\n  \n    initState({\n      testPath: 'multiple.spec.js',\n      testName: 'multi test two'\n    });\n    Sinon.spy(fs, 'unlinkSync');\n    try {\n      state.snapshotState.removeUncheckedKeys();\n      expect(fs.unlinkSync, 'to have calls satisfying', function () {\n        fs.unlinkSync(path.join(PATH_TO_TESTS, '__snapshots__/multiple.spec.unexpected-snap'));\n      });\n    } finally {\n      fs.unlinkSync.restore();\n    }\n  });\n\n});\n\n\n"]}